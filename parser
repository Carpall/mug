# Normalize SyntaxTree: NormalizeAndBuild() {TokenCollection => SyntaxTree}
# Rules: Expression = TokenSeries; 0 = Example, 1 = ParserMatcher

Global Fields:
   0 | i32 count = 10;
   1 | <identifer> <identifier> <symbol(=)> <expression> <symbol(;)>

Functions Declarating:
   0 | func main(): ? {}
   1 | <keyword(func)> <identfier> <body(parentheses)> <symbol(:)> <identifier> <body(brace)>


Base Statement {LocalStatement}:

   For Statement:
    0 | for i: i32 in 0..10 {}
    1 | <keyword(for)> <identifier> <symbol(:)> <identifier> <keyword(in)> <expression> <body(brace)>
   
   While Statement:
    0 | while true {}
    1 | <keyword(while)> <expression(bool)> <body(brace)>
   
   If Statement:
    0 | if true {}
    1 | <keyword(if)> <expression(bool)> <body(brace)>
   
   Else If Statement:
    0 | elif true {}
    1 | <keyword(elif)> <expression(bool)> <body(brace)>
   
   Else Statement:
    0 | else {}
    1 | <keyword(else)> <body(brace)>
   
   Function Calling - Object Instancing:
    0 | fib(10) # no ';' because there can be a instance method
    1 | <identifier> <body(parentheses)>
   
   Variable Declaratin:
    0 | i32 count = 0;
    1 | <identifier> <identifier> <symbol(=)> <expression> <symbol(;)>
   
   Variable Assign:
    0 | count = 1;
    1 | <identifier> <symbol(=)> <expression> <symbol(;)>
   
   Variable Increment:
    0 | count++;
    1 | <identifier> <symbol(++)> <symbol(;)>
   
   Variable Decrement:
    0 | count--;
    1 | <identifier> <symbol(--)> <symbol(;)>
   
   Alias Defining:
    0 | alias token = "tokens[i]";
    1 | <keyword(alias)> <identifier> <symbol(=)> <const(string)> <symbol(;)>


Extern Reference Define:

   Functions:
    0 | define func concat(left: str, right: str): str = "string [mscorlib]System.System::Concat(string, string)";
    1 | <keyword(define)> <keyword(func)> <identifier> <body(parentheses)> <symbol(:)> <identifier> <symbol(=)> <const(string)> <symbol(;)>
  
   Types:
    0 | define type random = "class [mscorlib]System.Random";
    1 | <keyword(define)> <keyword(func)> <identifier> <body(parentheses)> <symbol(:)> <identifier> <symbol(=)> <const(string)> <symbol(;)>


Use Statement:

   Local File:
    0 | use "file.mug";
    1 | <keyword(use)> <const(string)> <symbol(;)>
  
   Standard File:
    0 | use bag;
    1 | <keyword(use)> <identifier> <symbol(;)>


Class Declarating:
   0 | class person {}
   1 | <keyword(class)> <identifier> <body(brace)>


Model Declarating:
   
   Declarating:
    0 | model color {}
    1 | <keyword(model)> <identifier> <body(brace)>

   Body:
    0 | r: i8, g: i8, b: i8
	1 | <identifier> <symbol(:)> <identifier> # not match symbol(,) && Body.Length == TokenIndex; match symbol(,) && Body.Length < TokenIndex


Namespace Declarating:
   0 | name namespace {}
   1 | <keyword(name)> <identifier> <body(brace)>