Language Standards:
   - Non Native Compiled ()
   - Structure:
      - Lexer(Code) -> Tokens
      - Parser(Tokens) -> Ast
      - CodeGenerator(Ast) -> Assembly
        |__ Emitter() -> Generating Services
Syntax Rules:
   - Examples ->
      ```
      extern mscorlib # import dotnet libraries
      use system # import system library from default path
      define println(arg) = System.Console::WriteLine(object) # define a macro
      define print(arg) = System.Console::Write(object)
      define readfast() = System.Console::ReadKey()
      func main(args)
         try var x = int::fromstr(args[0]) catch var x = 0
         if x == 0
            println("No Valid Argument Passed!")
         elif x == int::rand(0, 10)
            println("Right Number!")
         else
            println("Wrong Number!")
         
         for i in args
            println( str::format("i: .0", i) )

         # make instance
         var me = new person("me", "user", 0, new person("friend", "user", 0, me))
         me.say("I will introduce my self...")
         println( me.getstring() )
         # reset me
         me = person::make()
         print("Press any key to continue...")
         readfast()
      
      class person
         [pub] field name = ?
         field username = ?
         field age = ?
         field bestfriend = ?
         [self] operator new(_name, _username, _age, _bestfriend)
            self.name = _name
            self.username = _username
            self.age = _age
            self.bestfriend = _bestfriend

         
         [pub, self] func say(words)
            println( str::format(".0: .1 ", self.name, words) )
         
         [pub, self] func getstring()
            return str::format("Hi, i'm .0, .1 years old, on socials `.2`. My best friend is .3", self.name, self.age, self.username, self.bestfriend.name)
         
         func make() # static public
            return new person(?, ?, ?, ?)
      ```
Targets:
   - Lexer(done)
   - Parser(wip)
   - CodeGenerator