Language Standards:
   - Native Compiled (Assembly x86-86)
   - Compile To Object Using `as`
   - Linking Using `ld`
   - Structure:
      - Lexer(Code) -> Tokens
      - Parser(Tokens) -> Ast
      - Optimizer(Ast) -> OptimizedAst
      - CodeGenerator(OptimizedAst) -> Assembly
        |__ Emitter() -> Generating Services
Syntax Rules:
   - Naming Conventions -> Lower Case (`system::string`)
   - Examples ->
      ```
      use system
      void main(systsem::array args) {
         try int16 x = args[0] catch int16 x = 0
         if x == 0 {
            system::println("It's not a number!")
         } elif x == 10 {
            system::println("You will never see this print!")
         } else {
            system::println("It's a number!")
         }
         for i<x {
            system::println( system::string::format("i: .0", i) )
         }

         # assing to a variable a value not declared in the function's type, but unsafe property allow ambiguos situations
         int var = func()

         # make instance
         type me = new person("me", "user", 0, new person("friend", "user", 0, me))
         me.say("I will introduce my self...")
         system::println(me.getstring())
         # this will generates a compilation error, selfpropertyless function are parsed as static member of a class, so make() is not callable from an instance
         me = me.make()
         # this will not generates a compilation error
         me = person::make()

         # loop
         main([0])
      }
      [unsafe] void func() {
         asm "mov eax, 100"
      }
      class person {
         [pub] string name = ?
         string username = ?
         int16 age = ?
         type bestfriend = ?
         type operator[new](string _name, string _username, int16 _age, type _bestfriend) {
            name = _name
            username = _username
            age = _age
            bestfriend = _bestfriend
         }
         [pub, self] void say(string words) {
            system::println( system::string::format(".0: .1 ", name, words) )
         }
         [pub, self] string getstring() {
            return system::string::format("Hi, i'm .0, .1 years old, on social `.2`. My best friend is .3", name, age, username, bestfriend.name)
         }
         type make() {
            return new person(?, ?, ?, ?)
         }
      }
      ```
Targets:
   - Lexer(wip)
   - Parser
   - Optimizer
   - CodeGenerator