std.arr
{
	trait Iterator[type G]
	{
		func next(): G;
	}

	type Arr[type ElementType]: Iterator[ElementType]
	{
		raw: [ElementType],
		index: u32
	}
	func Arr[type ElementType](arr: [ElementType]): Arr[ElementType]
	{
		return new Arr[type ElementType] {
			raw: arr
		};
	}
	func Arr[type ElementType](size: u32): Arr[ElementType]
	{
		return new Arr[type ElementType] {
			raw: new [ElementType, size] { }
		};
	}

	func next(self: Arr[type ElementType]): ElementType
	{
		if self.index >= self.raw.len()
		{

		}
		var buf: ElementType = self.raw[self.index];
		self.index++
		return buf;
	}
}

import std.io.*;

var io: IO = IO();

func test()
{
	var arr: Arr[str] = Arr(new [str, 1] { "string0", "string1" });

	# compiler will call automatically function 'next'
	for elem: str in arr
	{
		io.println("Elem: "+elem);
	}
}