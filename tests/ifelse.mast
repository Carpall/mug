GlobalMembersNode: {
   NodeBuilder: {
      FunctionNode: {
         IsMethod: False,
         Type: {
            KeyTVoid: '<null>'
         },
         Name: main,
         Modifier: Public,
         ParameterList: {
            ParameterListNode: {
            }
         },
         Body: {
            BlockNode: {
               Statement[0] {
                  VariableStatement: {
                     Type: {
                        KeyTi32: '<null>'
                     },
                     Name: left,
                     IsDefined: True,
                     Body: {
                        CallStatement: {
                           Name: num::as_i32,
                           Parameters: {
                              NodeBuilder: {
                                 CallStatement: {
                                    Name: io::readln,
                                    Parameters: {
                                       NodeBuilder: {
                                          ValueNode: ConstantString: '"Left: "',
                                       }
                                    }
                                 },
                              }
                           }
                        }
                     }
                  }
               },
               Statement[1] {
                  VariableStatement: {
                     Type: {
                        KeyTi32: '<null>'
                     },
                     Name: rigth,
                     IsDefined: True,
                     Body: {
                        CallStatement: {
                           Name: num::as_i32,
                           Parameters: {
                              NodeBuilder: {
                                 CallStatement: {
                                    Name: io::readln,
                                    Parameters: {
                                       NodeBuilder: {
                                          ValueNode: ConstantString: '"Rigth: "',
                                       }
                                    }
                                 },
                              }
                           }
                        }
                     }
                  }
               },
               Statement[2] {
                  ConditionalStatement: {
                     Kind: KeyIF,
                     Expression: {
                        CallStatement: {
                           Name: num::eq,
                           Parameters: {
                              NodeBuilder: {
                                 ValueNode: Identifier: 'left',
                                 ValueNode: Identifier: 'rigth',
                              }
                           }
                        }
                     },
                     Body: {
                        BlockNode: {
                           Statement[0] {
                              CallStatement: {
                                 Name: io::println,
                                 Parameters: {
                                    NodeBuilder: {
                                       ValueNode: ConstantString: '"nums are equals!"',
                                    }
                                 }
                              }
                           },
                        }
                     }
                  }
               },
               Statement[3] {
                  ConditionalStatement: {
                     Kind: KeyELIF,
                     Expression: {
                        BooleanExpressionNode: {
                           Operator: BoolOperatorMinor,
                           Left: {
                              ValueNode: Identifier: 'left'
                           },
                           Rigth: {
                              ValueNode: Identifier: 'rigth'
                           }
                        }
                     },
                     Body: {
                        BlockNode: {
                           Statement[0] {
                              CallStatement: {
                                 Name: io::println,
                                 Parameters: {
                                    NodeBuilder: {
                                       ValueNode: ConstantString: '"left less than rigth!"',
                                    }
                                 }
                              }
                           },
                        }
                     }
                  }
               },
               Statement[4] {
                  ConditionalStatement: {
                     Kind: KeyELSE,
                     Expression: {

                     },
                     Body: {
                        BlockNode: {
                           Statement[0] {
                              CallStatement: {
                                 Name: io::println,
                                 Parameters: {
                                    NodeBuilder: {
                                       ValueNode: ConstantString: '"left greater than rigth!"',
                                    }
                                 }
                              }
                           },
                        }
                     }
                  }
               },
            }
         }
      },
      FunctionNode: {
         IsMethod: False,
         Type: {
            KeyTbool: '<null>'
         },
         Name: num::eq,
         Modifier: Public,
         ParameterList: {
            ParameterListNode: {
               Parameter[0] {
                  Type: {
                     KeyTi32: '<null>'
                  },
                  Name: left,
                  IsSelf: False,
                  DefaultConstantValue: {
                     Bad: '<null>'
                  }
               },
               Parameter[1] {
                  Type: {
                     KeyTi32: '<null>'
                  },
                  Name: rigth,
                  IsSelf: False,
                  DefaultConstantValue: {
                     Bad: '<null>'
                  }
               },
            }
         },
         Body: {
            BlockNode: {
               Statement[0] {
                  ReturnStatement: {
                     Body: {
                        BooleanExpressionNode: {
                           Operator: BoolOperatorEQ,
                           Left: {
                              ValueNode: Identifier: 'left'
                           },
                           Rigth: {
                              ValueNode: Identifier: 'rigth'
                           }
                        }
                     }
                  }
               },
            }
         }
      },
   }
}